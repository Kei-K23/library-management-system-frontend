@page "/users"
@rendermode InteractiveServer
@using LibraryManagementSystemApp.Models
@using LibraryManagementSystemApp.Services
@using LibraryManagementSystemApp.Components.UI
@inject ApiService apiService
@inject AuthService authService
@inject IToastService toastService

<PageTitle>Users</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3>Manage Users</h3>
    <CreateUserModal Title="Create User" OnMutationUpdate="OnMutationUpdate" />
</div>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}
else
{
    <div class="table-responsive-xxl overflow-x-hidden">
    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Username</th>
                <th>Email</th>
                <th>User role</th>
                <th>Is banned</th>
                <th>Is locked</th>
                <th>Date of joined</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
                {
                    <tr>
                        <th>@users.IndexOf(user)</th>
                        <td>@user.UserName</td>
                        <td>@user.Email</td>
                        <td>@user.UserRole</td>
                        <td>
                            @if (user.IsBanned.HasValue)
                            {
                                <button @onclick="() => OnBanUser(user.Id, user.IsBanned.Value)"
                                    class="btn btn-sm @(user.IsBanned.Value ? "btn-warning" : "btn-danger")">
                                    @(user.IsBanned.Value ? "Un-Ban" : "Ban")
                                </button>
                            }
                        </td>
                        <td>
                            @if (user.IsLocked.HasValue)
                            {
                                <button @onclick="() => OnLockUser(user.Id, user.IsLocked.Value)"
                                    class="btn btn-sm @(user.IsLocked.Value ? "btn-warning" : "btn-danger")">
                                    @(user.IsLocked.Value ? "Un-Lock" : "Lock")
                                </button>
                            }
                        </td>
                        <td>@user.DateJoined.ToShortDateString()</td>
                        <td>
                            <button @onclick="() => NavigateToEditUser(user.Id)" class="btn btn-primary btn-sm">Edit</button>
                            <button @onclick="() => OnResetPassword(user.Id)" class="btn btn-primary btn-sm">Reset
                                password</button>
                            <button @onclick="() => OnDeleteUser(user.Id)" class="btn btn-danger btn-sm"><i
                                    class="fa fa-trash"></i></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}


@code {
    [Inject] NavigationManager NavigationManager { get; set; }
    private List<User> users = new List<User>();
    private string errorMessage = "";
    private bool isLoading = true;
    private readonly object _lock = new object();

    private void NavigateToEditUser(Guid userId)
    {
        NavigationManager.NavigateTo($"/users/edit/{userId}");
    }
    protected override async Task OnInitializedAsync()
    {
        bool isAuthenticated = await authService.IsAuthenticated();
        if (!isAuthenticated)
        {
            return;
        }
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        lock (_lock)
        {
            isLoading = true;
        }

        var (data, error) = await apiService.SendRequestAsync<User[]>(HttpMethod.Get, "/api/v1/users");

        lock (_lock)
        {
            if (error != null)
            {
                errorMessage = error;
            }
            else
            {
                users = data.ToList();
            }

            isLoading = false;
        }
    }

    private async Task OnBanUser(Guid userId, bool isBan)
    {
        isLoading = true;
        var updatePayload = new { IsBanned = !isBan };

        var (_, error) = await apiService.SendRequestAsync<User>(HttpMethod.Put, $"/api/v1/users/{userId}", updatePayload);
        if (!string.IsNullOrEmpty(error))
        {
            errorMessage = error;
        }
        else
        {
            await OnMutationUpdate();
            if (isBan)
            {
                toastService.ShowToast("User unbanned successfully", "success");
            }
            else
            {
                toastService.ShowToast("User banned successfully", "success");
            }
        }

        isLoading = false;
    }

    private async Task OnLockUser(Guid userId, bool isLock)
    {
        isLoading = true;
        var updatePayload = new { IsLocked = !isLock };

        var (_, error) = await apiService.SendRequestAsync<User>(HttpMethod.Put, $"/api/v1/users/{userId}", updatePayload);
        if (!string.IsNullOrEmpty(error))
        {
            errorMessage = error;
        }
        else
        {
            await OnMutationUpdate();
            if (isLock)
            {
                toastService.ShowToast("User unlocked successfully", "success");
            }
            else
            {
                toastService.ShowToast("User locked successfully", "success");
            }
        }

        isLoading = false;
    }

    private async Task OnResetPassword(Guid userId)
    {
        isLoading = true;
        // Hide and store default password to .env
        var updatePayload = new { Password = "password123" };

        var (_, error) = await apiService.SendRequestAsync<User>(HttpMethod.Put, $"/api/v1/users/{userId}", updatePayload);
        if (!string.IsNullOrEmpty(error))
        {
            errorMessage = error;
        }
        else
        {
            await OnMutationUpdate();
        }

        isLoading = false;
    }

    private async Task OnDeleteUser(Guid userId)
    {
        isLoading = true;
        var url = "/api/v1/users/" + userId;
        var (_, error) = await apiService.SendRequestAsync<User>(HttpMethod.Delete, url);
        if (!string.IsNullOrEmpty(error))
        {
            errorMessage = error;
            toastService.ShowToast("Error deleting user", "danger");
        }
        else
        {
            await OnMutationUpdate();
            toastService.ShowToast("User deleted successfully", "success");
        }

        isLoading = false;
    }

    private async Task OnMutationUpdate()
    {
        await LoadUsers();
        StateHasChanged();
    }
}