@page "/users"
@rendermode InteractiveServer
@using LibraryManagementSystemApp.Models
@using LibraryManagementSystemApp.Services
@using LibraryManagementSystemApp.Components.UI
@inject ApiService apiService

<PageTitle>Users</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3>Manage Users</h3>
    <CreateUserModal />
</div>

@if (users.Count < 0)
{
    <p>Loading...</p>
}
else
{
    <div class="table-responsive-xxl overflow-x-hidden">
    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Username</th>
                <th>Email</th>
                <th>User role</th>
                <th>Is banned</th>
                <th>Is locked</th>
                <th>Date of joined</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < users.Count; i++)
                {
                    <tr>
                        <th>@i</th>
                        <td>@users[i].UserName</td>
                        <td>@users[i].Email</td>
                        <td>@users[i].UserRole</td>
                        <td>@users[i].IsBanned</td>
                        <td>@users[i].IsLocked</td>
                        <td>@users[i].DateJoined.ToShortDateString()</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<User> users = new List<User>();
    private string errorMessage = "";
    protected override async Task OnInitializedAsync()
    {
        var (data, error) = await apiService.SendRequestAsync<User[]>(HttpMethod.Get, "/api/v1/users");

        if (error != null)
        {
            errorMessage = error;
        }
        else
        {
            users = data.ToList();
        }
    }
}
