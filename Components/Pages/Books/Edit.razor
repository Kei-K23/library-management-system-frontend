@page "/books/edit/{bookId:guid}"
@rendermode InteractiveServer
@using LibraryManagementSystemApp.Services
@using LibraryManagementSystemApp.Enum
@using LibraryManagementSystemApp.Models
@inject ApiService apiService
@inject AuthService authService
@inject NavigationManager NavigationManager


<PageTitle>Edit User</PageTitle>

<h3>Edit User</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}
else
{
    <EditForm Model="user" OnValidSubmit="UpdateUser" FormName="updateUserForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" class="form-control" @bind-Value="user.UserName" />
    </div>

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" class="form-control" @bind-Value="user.Email" />
    </div>

    <div class="mb-3">
        <label for="userRole" class="form-label">User Role</label>
        <InputSelect @bind-Value="user.UserRole" class="form-control" id="userRole">
            @foreach (UserRole role in Enum.GetValues(typeof(UserRole)))
                {
                    <option value="@role">@role.ToString()</option>
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button @onclick="CancelEdit" class="btn btn-secondary">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public Guid bookId { get; set; }

    private User user { get; set; }
    private string errorMessage = "";
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        bool isAuthenticated = await authService.IsAuthenticated();
        if (!isAuthenticated)
        {
            return;
        }
        await LoadUser();
    }

    private async Task LoadUser()
    {
        var (data, error) = await apiService.SendRequestAsync<User>(HttpMethod.Get, $"/api/v1/users/{bookId}");
        if (error != null)
        {
            errorMessage = error;
        }
        else
        {
            user = data;
        }
        isLoading = false;
    }

    private async Task UpdateUser()
    {
        var (_, error) = await apiService.SendRequestAsync<User>(HttpMethod.Put, $"/api/v1/users/{bookId}", user);
        if (!string.IsNullOrEmpty(error))
        {
            errorMessage = error;
        }
        else
        {
            NavigationManager.NavigateTo("/users");
        }
    }

    private void CancelEdit()
    {
        NavigationManager.NavigateTo("/users");
    }
}
