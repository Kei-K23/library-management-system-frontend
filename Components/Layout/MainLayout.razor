@using LibraryManagementSystemApp.Models
@using LibraryManagementSystemApp.Services
@inject HttpClient Http
@inherits LayoutComponentBase
@inject HttpContextService HttpContextService
@inject IJSRuntime JS
@inject NavigationManager Navigation

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="nav-menu">
            <div>
                @if (isLoading)
                {
                    <p>
                        <i class="fa-solid fa-spinner fa-spin-pulse fs-5"></i>
                    </p>
                }
                else
                {
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <p>
                            <i class="fa-solid fa-triangle-exclamation fs-5 text-danger"></i>
                            Error
                        </p>
                    }
                    else
                    {
                        @if (!string.IsNullOrEmpty(user.Id.ToString()))
                        {
                            <div class="flex-center">
                                <p class="fw-bolder">@user.UserName</p>
                                <button @onclick="Logout" type="button" class="btn btn-danger btn-sm">Logout</button>
                            </div>
                        }
                    }
                }
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


@code {
    private User user = new User();
    private bool isLoading = true;
    private string errorMessage = "";
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Ensure HttpContextService is not null
            if (HttpContextService == null)
            {
                errorMessage = "HttpContextService is not available.";
                isLoading = false;
                return;
            }
            // Fetch the token from the cookie
            var token = HttpContextService.GetCookie("authToken");
            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "No token found.";
                isLoading = false;
                return;
            }

            isLoading = true;
            var request = new HttpRequestMessage(HttpMethod.Get, "/api/v1/users/me");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                user = await response.Content.ReadFromJsonAsync<User>();
            }
            else
            {
                errorMessage = "Failed to fetch user data.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            isLoading = false;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task Logout()
    {
        try
        {
            Console.WriteLine("Logout method called");

            // Clear the cookie
            await JS.InvokeVoidAsync("DeleteCookie.DeleteCookie", "authToken");

            // Redirect to the login page or another appropriate page
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout failed: {ex.Message}");
            errorMessage = $"Logout failed: {ex.Message}";
        }
    }

}